<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink">
  <info>
    <title>Bootstrap a Web Application with Spring 4</title>
  </info>
  <anchor xml:id="wrapper"/>
  <anchor xml:id="inner-wrapper"/>
  <!--
/#side-nav
-->
  <!--
/.menus
-->
  <para><link linkend="top">Return to Content</link></para>
  <!--
#content Starts
-->
  <anchor xml:id="content"/>
  <anchor xml:id="main-sidebar-container"/>
  <!--
#main Starts
-->
  <anchor xml:id="toc_container"/>
  <para>Contents</para>
  <itemizedlist>
    <listitem>
      <para><link linkend="Table_of_Contents">Table of Contents</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.1_Overview">1. Overview</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.2_The_Maven_pomxml">2. The Maven pom.xml</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.3_The_Java_based_Web_Configuration">3. The Java based Web Configuration</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.4_Conclusion">4. Conclusion</link></para>
    </listitem>
  </itemizedlist>
  <para>If you&apos;re new here, <link xl:href="https://my.leadpages.net/leadbox/146382273f72a2%3A13a71ac76b46dc/5735865741475840/">you may want to get my &quot;REST APIs with Spring&quot; eBook</link>. Thanks for visiting!</para>
  <para><link xl:href=""/></para>
  <!--
Start Shortcoder content
-->
  <!--
End Shortcoder content
-->
  <section>
    <title><anchor xml:id="Table_of_Contents"/><emphasis role="bold">Table of Contents</emphasis></title>
    <itemizedlist>
      <listitem>
        <para><link linkend="overview"><emphasis role="bold">1. </emphasis>Overview</link></para>
      </listitem>
      <listitem>
        <para><link linkend="maven"><emphasis role="bold">2. </emphasis>The Maven pom.xml</link></para>
      </listitem>
      <listitem>
        <para><link linkend="cglib"><emphasis role="bold">    2.1. </emphasis>Justification of the <emphasis>cglib</emphasis> dependency</link></para>
      </listitem>
      <listitem>
        <para><link linkend="cglib_gone"><emphasis role="bold">    2.2. </emphasis>The <emphasis>cglib</emphasis> dependency in Spring 3.2 and beyond</link></para>
      </listitem>
      <listitem>
        <para><link linkend="java_config"><emphasis role="bold">3. </emphasis>The Java based web configuration</link></para>
      </listitem>
      <listitem>
        <para><link linkend="web_xml"><emphasis role="bold">   3.1. </emphasis>The web.xml</link></para>
      </listitem>
      <listitem>
        <para><link linkend="conclusion"><emphasis role="bold">4. </emphasis>Conclusion</link></para>
      </listitem>
    </itemizedlist>
    <section xml:id="overview.1">
      <title><anchor xml:id="dbdoclet.1_Overview"/><emphasis role="bold">1. Overview</emphasis></title>
      <para>The tutorial illustrates how to <emphasis role="bold">Bootstrap a Web Application with Spring</emphasis> and also discusses how to make the jump <emphasis role="bold">from XML to Java</emphasis> without having to completely migrate the entire XML configuration.</para>
    </section>
    <section xml:id="maven.1">
      <title><anchor xml:id="dbdoclet.2_The_Maven_pomxml"/><emphasis role="bold">2. The Maven pom.xml</emphasis></title>
      <screen>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; 
   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
   xsi:schemaLocation=&quot;
      http://maven.apache.org/POM/4.0.0 
      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
   &lt;groupId&gt;org&lt;/groupId&gt;
   &lt;artifactId&gt;rest&lt;/artifactId&gt;
   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
   &lt;packaging&gt;war&lt;/packaging&gt;

   &lt;dependencies&gt;

      &lt;dependency&gt;
         &lt;groupId&gt;org.springframework&lt;/groupId&gt;
         &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
         &lt;version&gt;${spring.version}&lt;/version&gt;
         &lt;exclusions&gt;
            &lt;exclusion&gt;
               &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;
               &lt;groupId&gt;commons-logging&lt;/groupId&gt;
            &lt;/exclusion&gt;
         &lt;/exclusions&gt;
      &lt;/dependency&gt;
      
   &lt;/dependencies&gt;

   &lt;build&gt;
      &lt;finalName&gt;rest&lt;/finalName&gt;

      &lt;plugins&gt;
         &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.1&lt;/version&gt;
            &lt;configuration&gt;
               &lt;source&gt;1.6&lt;/source&gt;
               &lt;target&gt;1.6&lt;/target&gt;
               &lt;encoding&gt;UTF-8&lt;/encoding&gt;
            &lt;/configuration&gt;
         &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/build&gt;

   &lt;properties&gt;
      &lt;spring.version&gt;4.0.5.RELEASE&lt;/spring.version&gt;
   &lt;/properties&gt;

&lt;/project&gt;</screen>
      <section xml:id="cglib.1">
        <title><emphasis role="bold">2.1. The cglib dependency before Spring 3.2</emphasis></title>
        <para>You may wonder why <emphasis>cglib</emphasis> is a dependency – it turns out there is a valid reason to include it – the entire configuration cannot function without it. If removed, Spring will throw:</para>
        <para><emphasis>Caused by: java.lang.IllegalStateException: CGLIB is required to process @Configuration classes. Either add CGLIB to the classpath or remove the following @Configuration bean definitions</emphasis></para>
        <para>The reason this happens is explained by the way Spring deals with <emphasis>@Configuration</emphasis> classes. These classes are effectively beans, and because of this they need to be aware of the Context, and respect scope and other bean semantics. This is achieved by dynamically creating a cglib proxy with this awareness for each <emphasis>@Configuration</emphasis> class, hence the cglib dependency.</para>
        <para>Also, because of this, there are a few restrictions for <emphasis>Configuration</emphasis> annotated classes:</para>
        <itemizedlist>
          <listitem>
            <para> Configuration classes <emphasis role="bold">should not be final</emphasis></para>
          </listitem>
          <listitem>
            <para> They should have a constructor with no arguments</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="cglib_gone.1">
        <title><emphasis role="bold">2.2. The cglib dependency in Spring 3.2 and beyond</emphasis></title>
        <para>Starting with Spring 3.2, it is <emphasis role="bold">no longer necessary to add cglib as an explicit dependency</emphasis>. This is because Spring is in now inlining <emphasis>cglib</emphasis> – which will ensure that all class based proxying functionality will work out of the box with Spring 3.2.</para>
        <para>The new cglib code is placed under the Spring package: <emphasis>org.springframework.cglib</emphasis> (replacing the original <emphasis>net.sf.cglib</emphasis>). The reason for the package change is to avoid conflicts with any <emphasis>cglib</emphasis> versions already existing on the classpath.</para>
        <para>Also, the new cglib 3.0 is now used, upgraded from the older 2.2 dependency (see this <link xl:href="https://jira.springsource.org/browse/SPR-9669">JIRA issue</link> for more details).</para>
        <para>Finally, now that Spring 4.0 is out in the wild, changes like this one (removing the cglib dependency) are to be expected with Java 8 just around the corner – you can watch <link xl:href="https://jira.springsource.org/browse/SPR-9639">this Spring Jira</link> to keep track of the Spring support, and <link xl:href="http://www.baeldung.com/java8">the Java 8 Resources page</link> to keep tabs on the that.</para>
      </section>
    </section>
    <section xml:id="java_config.1">
      <title><anchor xml:id="dbdoclet.3_The_Java_based_Web_Configuration"/><emphasis role="bold">3. The Java based Web Configuration</emphasis></title>
      <screen>@Configuration
@ImportResource( { &quot;classpath*:/rest_config.xml&quot; } )
@ComponentScan( basePackages = &quot;org.rest&quot; )
@PropertySource({ &quot;classpath:rest.properties&quot;, &quot;classpath:web.properties&quot; })
public class AppConfig{

   @Bean
   public static PropertySourcesPlaceholderConfigurer properties() {
      return new PropertySourcesPlaceholderConfigurer();
   }
}</screen>
      <para>First, the <emphasis role="bold">@Configuration</emphasis> annotation – this is the main artifact used by the Java based Spring configuration; it is itself meta-annotated with <emphasis>@Component</emphasis>, which makes the annotated classes <emphasis role="bold">standard beans</emphasis> and as such, also candidates for component scanning. The main purpose of <emphasis>@Configuration</emphasis> classes is to be sources of bean definitions for the Spring IoC Container. For a more detailed description, see the <link xl:href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-java">official docs</link>.</para>
      <para>Then, <emphasis role="bold">@ImportResource</emphasis> is used to import the existing XML based Spring configuration. This may be configuration which is still being migrated from XML to Java, or simply legacy configuration that you wish to keep. Either way, importing it into the Container is essential for a successful migration, allowing small steps without to much risk. The equivalent XML annotation that is replaced is:</para>
      <para><emphasis>&lt;import resource=”classpath*:/rest_config.xml” /&gt;</emphasis></para>
      <para>Moving on to <emphasis role="bold">@ComponentScan</emphasis> – this configures the component scanning directive, effectively replacing the XML:</para>
      <screen>&lt;context:component-scan base-package=&quot;org.rest&quot; /&gt;</screen>
      <para>As of Spring 3.1, the <emphasis>@Configuration</emphasis> are excluded from classpath scanning by default – see <link xl:href="https://jira.springsource.org/browse/SPR-8808">this JIRA issue</link>. Before Spring 3.1 though, these classes should have been excluded explicitly:</para>
      <screen>excludeFilters = { @ComponentScan.Filter( Configuration.class ) }</screen>
      <para>The <emphasis>@Configuration</emphasis> classes should not be autodiscovered because they are already specified and used by the Container – allowing them to be rediscovered and introduced into the Spring context will result in the following error:</para>
      <para><emphasis>Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name ‘webConfig’ for bean class [org.rest.spring.AppConfig] conflicts with existing, non-compatible bean definition of same name and class [org.rest.spring.AppConfig]</emphasis></para>
      <para>And finally, using the<emphasis role="bold"> @Bean</emphasis> annotation to configure the <emphasis role="bold">properties support</emphasis> – <emphasis>PropertySourcesPlaceholderConfigurer</emphasis> is initialized in a <emphasis>@Bean</emphasis> annotated method, indicating it will produce a Spring bean managed by the Container. This new configuration has replaced the following XML:</para>
      <screen>&lt;context:property-placeholder
location=&quot;classpath:persistence.properties, classpath:web.properties&quot;
ignore-unresolvable=&quot;true&quot;/&gt;</screen>
      <para>For a more in depth discussion on why it was necessary to manually register the <emphasis>PropertySourcesPlaceholderConfigurer</emphasis> bean, see the <link xl:href="http://www.baeldung.com/2012/02/06/properties-with-spring/">Properties with Spring Tutorial</link>.</para>
      <section xml:id="web_xml.1">
        <title><emphasis role="bold">3.1. The web.xml</emphasis></title>
        <screen>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns=&quot;
       http://java.sun.com/xml/ns/javaee&quot;
       xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;
       http://java.sun.com/xml/ns/javaee 
       http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;
    id=&quot;rest&quot; version=&quot;3.0&quot;&gt;

   &lt;context-param&gt;
      &lt;param-name&gt;contextClass&lt;/param-name&gt;
      &lt;param-value&gt;
         org.springframework.web.context.support.AnnotationConfigWebApplicationContext
      &lt;/param-value&gt;
   &lt;/context-param&gt;
   &lt;context-param&gt;
      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
      &lt;param-value&gt;org.rest.spring.root&lt;/param-value&gt;
   &lt;/context-param&gt;
   &lt;listener&gt;
      &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
   &lt;/listener&gt;

   &lt;servlet&gt;
      &lt;servlet-name&gt;rest&lt;/servlet-name&gt;
      &lt;servlet-class&gt;
         org.springframework.web.servlet.DispatcherServlet
      &lt;/servlet-class&gt;
      &lt;init-param&gt;
         &lt;param-name&gt;contextClass&lt;/param-name&gt;
         &lt;param-value&gt;
            org.springframework.web.context.support.AnnotationConfigWebApplicationContext
         &lt;/param-value&gt;
      &lt;/init-param&gt;
      &lt;init-param&gt;
         &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
         &lt;param-value&gt;org.rest.spring.rest&lt;/param-value&gt;
      &lt;/init-param&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
   &lt;/servlet&gt;
   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;rest&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/api/*&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;

   &lt;welcome-file-list&gt;
      &lt;welcome-file /&gt;
   &lt;/welcome-file-list&gt;

&lt;/web-app&gt;</screen>
         <para> First, the root context is defined and configured to use <emphasis>AnnotationConfigWebApplicationContext</emphasis> instead of the default <emphasis>XmlWebApplicationContext</emphasis>. The newer <emphasis>AnnotationConfigWebApplicationContext</emphasis> accepts <emphasis>@Configuration</emphasis> annotated classes as input for the Container configuration and is needed in order to set up the Java based context. Unlike <emphasis>XmlWebApplicationContext</emphasis>, it assumes no default configuration class locations, so the <emphasis>“contextConfigLocation”</emphasis><emphasis>init-param</emphasis> for the Servlet must be set. This will point to the java package where the <emphasis>@Configuration</emphasis> classes are located; the fully qualified name(s) of the classes are also supported.</para>
        <para>Next, the <emphasis>DispatcherServlet</emphasis> is configured to use the same kind of context, with the only difference that it’s loading configuration classes out of a different package.</para>
        <para>Other than this, the <emphasis>web.xml</emphasis> doesn’t really change from a XML to a Java based configuration.</para>
      </section>
    </section>
    <section xml:id="conclusion.1">
      <title><anchor xml:id="dbdoclet.4_Conclusion"/><emphasis role="bold">4. Conclusion</emphasis></title>
      <para>The presented approach allows for a smooth <emphasis role="bold">migration of the Spring configuration</emphasis> from XML to Java, mixing the old and the new. This is important for older projects, which may have a lot of XML based configuration that cannot be migrated all at once.</para>
      <para>This way, in a migration, the XML beans can be ported in small increments.</para>
      <para>In <link xl:href="http://www.baeldung.com/2011/10/25/building-a-restful-web-service-with-spring-3-1-and-java-based-configuration-part-2/">the next article on REST with Spring</link>, I cover setting up MVC in the project, configuration of the HTTP status codes, payload marshalling and content negotiation.</para>
      <para><link xl:href="https://my.leadpages.net/leadbox/147e9e473f72a2%3A13a71ac76b46dc/5745710343389184/">The implementation of this <emphasis>Bootstrap a Spring Web App Tutorial</emphasis> can be downloaded as a working sample project.</link></para>
      <para>This is an Eclipse based project, so it should be easy to import and run as it is.</para>
      <!--
Start Shortcoder content
-->
      <!--
End Shortcoder content
-->
      <para><link xl:href=""/></para>
      <anchor xml:id="dd_ajax_float"/>
      <para><link xl:href="http://twitter.com/share"/></para>
      <!--
OptinSkin
-->
      <anchor xml:id="ois_12"/>
      <!--
End OptinSkin
-->
      <!--
/.entry
-->
      <para><emphasis role="italic"/><link xl:href="http://www.baeldung.com/tag/java-2/">java</link>, <link xl:href="http://www.baeldung.com/tag/spring/">Spring</link></para>
      <!--
/.post
-->
      <!--
/#main
-->
      <anchor xml:id="optinskin-widget-3"/>
      <!--
OptinSkin
-->
      <anchor xml:id="ois_5"/>
      <!--
End OptinSkin
-->
      <!--
/#sidebar
-->
      <!--
/#main-sidebar-container
-->
      <!--
/#content
-->
      <anchor xml:id="copyright"/>
      <para>© 2014 Baeldung. All Rights Reserved. </para>
      <anchor xml:id="credit"/>
      <!--
/#inner-wrapper
-->
      <!--
/#wrapper
-->
      <!--
/.fix
-->
      <!--
ngg_resource_manager_marker
-->
      <!--
WP SyntaxHighlighter Ver.1.7.3 Begin
-->
      <!--
WP SyntaxHighlighter Ver.1.7.3 End
-->
    </section>
  </section>
</article>
<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink">
  <info>
    <title>Spring Security Basic Authentication</title>
  </info>
  <anchor xml:id="wrapper"/>
  <anchor xml:id="inner-wrapper"/>
  <!--
/#side-nav
-->
  <!--
/.menus
-->
  <para><link linkend="top">Return to Content</link></para>
  <!--
#content Starts
-->
  <anchor xml:id="content"/>
  <anchor xml:id="main-sidebar-container"/>
  <!--
#main Starts
-->
  <anchor xml:id="toc_container"/>
  <para>Contents</para>
  <itemizedlist>
    <listitem>
      <para><link linkend="dbdoclet.1_Overview">1. Overview</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.2_The_Spring_Security_Configuration">2. The Spring Security Configuration</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.3_Consuming_The_Secured_Application">3. Consuming The Secured Application</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.4_Further_Configuration_8211_The_Entry_Point">4. Further Configuration – The Entry Point</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.5_The_Maven_Dependencies">5. The Maven Dependencies</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.6_Conclusion">6. Conclusion</link></para>
    </listitem>
  </itemizedlist>
  <para>If you&apos;re new here, <link xl:href="https://my.leadpages.net/leadbox/146382273f72a2%3A13a71ac76b46dc/5735865741475840/">you may want to get my &quot;REST APIs with Spring&quot; eBook</link>. Thanks for visiting!</para>
  <para><link xl:href=""/></para>
  <!--
Start Shortcoder content
-->
  <!--
End Shortcoder content
-->
  <section xml:id="overview.1">
    <title><anchor xml:id="dbdoclet.1_Overview"/><emphasis role="bold">1. Overview</emphasis></title>
    <para>This tutorial shows how to set up, configure and customize <emphasis role="bold">Basic Authentication with Spring</emphasis>. We’re going to built on top of the simple <link xl:href="http://www.baeldung.com/spring-mvc-tutorial">Spring MVC example</link>, and secure the UI of the MVC application with the Basic Auth mechanism provided by Spring Security.</para>
    <section xml:id="configuration.1">
      <title><anchor xml:id="dbdoclet.2_The_Spring_Security_Configuration"/><emphasis role="bold">2. The Spring Security Configuration</emphasis></title>
      <para>The Configuration for Spring Security is still XML:</para>
      <screen>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans:beans xmlns=&quot;http://www.springframework.org/schema/security&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
    xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot;
    xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd&quot;&gt;

    &lt;http use-expressions=&quot;true&quot;&gt;
        &lt;intercept-url pattern=&quot;/**&quot; access=&quot;isAuthenticated()&quot; /&gt;

        &lt;http-basic /&gt;
    &lt;/http&gt;

    &lt;authentication-manager&gt;
        &lt;authentication-provider&gt;
            &lt;user-service&gt;
                &lt;user name=&quot;user1&quot; password=&quot;user1Pass&quot; authorities=&quot;ROLE_USER&quot; /&gt;
            &lt;/user-service&gt;
        &lt;/authentication-provider&gt;
    &lt;/authentication-manager&gt;

&lt;/beans:beans&gt;</screen>
      <para>This is one of the last pieces of configuration in Spring that still need XML – <link xl:href="https://github.com/SpringSource/spring-security-javaconfig">Java Configuration for Spring Security</link> is still a work in progress.</para>
      <para>What is relevant here is the <emphasis>&lt;http-basic&gt;</emphasis> element inside the main <emphasis>&lt;http&gt;</emphasis> element of the configuration – this is enough to enable Basic Authentication for the entire application. The Authentication Manager is not the focus of this tutorial, so we are using an in memory manager with the user and password defined in plaintext.</para>
      <para>The <emphasis>web.xml</emphasis> of the web application enabling Spring Security has already been discussed in the <link xl:href="http://www.baeldung.com/spring-security-login#web_xml">Spring Logout tutorial</link>.</para>
    </section>
    <section xml:id="usage.1">
      <title><anchor xml:id="dbdoclet.3_Consuming_The_Secured_Application"/><emphasis role="bold">3. Consuming The Secured Application</emphasis></title>
      <para>The <emphasis>curl</emphasis> command is our go to tool for consuming the secured application.</para>
      <para>First, let’s try to request the <emphasis>/homepage.html</emphasis> without providing any security credentials:</para>
      <screen>curl -i http://localhost:8080/spring-security-mvc-basic-auth/homepage.html</screen>
      <para>We get back the expected <emphasis>401 Unauthorized</emphasis> and <link xl:href="http://tools.ietf.org/html/rfc1945#section-10.16">the Authentication Challenge</link>:</para>
      <screen>HTTP/1.1 401 Unauthorized
Server: Apache-Coyote/1.1
Set-Cookie: JSESSIONID=E5A8D3C16B65A0A007CFAACAEEE6916B; Path=/spring-security-mvc-basic-auth/; HttpOnly
WWW-Authenticate: Basic realm=&quot;Spring Security Application&quot;
Content-Type: text/html;charset=utf-8
Content-Length: 1061
Date: Wed, 29 May 2013 15:14:08 GMT</screen>
      <para>The browser would interpret this challenge and prompt us for credentials with a simple dialog, but since we’re using <emphasis>curl</emphasis>, this isn’t the case.</para>
      <para>Now, let’s request the same resource – the homepage – but <emphasis role="bold">provide the credentials</emphasis> to access it as well:</para>
      <screen>curl -i --user user1:user1Pass http://localhost:8080/spring-security-mvc-basic-auth/homepage.html</screen>
      <para>Now, the response from the server is <emphasis>200 OK</emphasis> along with a <emphasis>Cookie</emphasis>:</para>
      <screen>HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Set-Cookie: JSESSIONID=301225C7AE7C74B0892887389996785D; Path=/spring-security-mvc-basic-auth/; HttpOnly
Content-Type: text/html;charset=ISO-8859-1
Content-Language: en-US
Content-Length: 90
Date: Wed, 29 May 2013 15:19:38 GMT</screen>
      <para>From the browser, the application can be consumed normally – the only difference is that a login page is no longer a hard requirement since all browsers support Basic Authentication and use a dialog to prompt the user for credentials.</para>
    </section>
    <section xml:id="advanced_config.1">
      <title><anchor xml:id="dbdoclet.4_Further_Configuration_8211_The_Entry_Point"/><emphasis role="bold">4. Further Configuration – </emphasis><emphasis role="bold">The Entry Point</emphasis></title>
      <para>By default, the <emphasis>BasicAuthenticationEntryPoint</emphasis> provisioned by Spring Security returns a full html page for a <emphasis>401 Unauthorized</emphasis> response back to the client. This html representation of the error renders well in a browser, but it not well suited for other scenarios, such as a REST API where a json representation may be preferred.</para>
      <para>The namespace is flexible enough for this new requirement as well – to address this – the entry point can be overridden:</para>
      <screen>&lt;http-basic entry-point-ref=&quot;myBasicAuthenticationEntryPoint&quot; /&gt;</screen>
      <para>The new entry point is defined as a standard bean:</para>
      <screen>@Component
public class MyBasicAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {

    @Override
    public void commence
      (HttpServletRequest request, HttpServletResponse response, AuthenticationException authEx) 
      throws IOException, ServletException {
        response.addHeader(&quot;WWW-Authenticate&quot;, &quot;Basic realm=\&quot;&quot; + getRealmName() + &quot;\&quot;&quot;);
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        PrintWriter writer = response.getWriter();
        writer.println(&quot;HTTP Status 401 - &quot; + authEx.getMessage());
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        setRealmName(&quot;Baeldung&quot;);
        super.afterPropertiesSet();
    }
}</screen>
      <para>By writing directly to the HTTP Response we now have full control over the format of the response body.</para>
    </section>
    <section xml:id="maven.1">
      <title><anchor xml:id="dbdoclet.5_The_Maven_Dependencies"/><emphasis role="bold">5. The Maven Dependencies</emphasis></title>
      <para>The Maven dependencies for Spring Security have been discussed before in the <link xl:href="http://www.baeldung.com/spring-security-with-maven">Spring Security with Maven article</link> – we will need both <emphasis>spring-security-web</emphasis> and <emphasis>spring-security-config</emphasis> available at runtime.</para>
    </section>
    <section xml:id="conclusion.1">
      <title><anchor xml:id="dbdoclet.6_Conclusion"/><emphasis role="bold">6. Conclusion</emphasis></title>
      <para>In this example we secured an MVC application with Spring Security and Basic Authentication. We discussed the XML configuration and we consumed the application with simple curl commands. Finally took control of the exact error message format – moving from the standard HTML error page to a custom text or json format.</para>
      <para>The implementation of this Spring tutorial can be found in <link xl:href="https://github.com/eugenp/tutorials/tree/master/spring-security-basic-auth#readme">the github project</link> – this is an Eclipse based project, so it should be easy to import and run as it is. When the project runs locally, the sample html can be accessed at:</para>
      <para><link xl:href="http://localhost:8080/spring-security-mvc-basic-auth/homepage.html">http://localhost:8080/spring-security-mvc-basic-auth/homepage.html</link></para>
      <!--
Start Shortcoder content
-->
      <!--
End Shortcoder content
-->
      <para><link xl:href=""/></para>
      <anchor xml:id="dd_ajax_float"/>
      <para><link xl:href="http://twitter.com/share"/></para>
      <!--
OptinSkin
-->
      <anchor xml:id="ois_12"/>
      <!--
End OptinSkin
-->
      <!--
/.entry
-->
      <para><emphasis role="italic"/><link xl:href="http://www.baeldung.com/tag/security/">security</link>, <link xl:href="http://www.baeldung.com/tag/spring/">Spring</link></para>
      <!--
/.post
-->
      <!--
/#main
-->
      <anchor xml:id="optinskin-widget-3"/>
      <!--
OptinSkin
-->
      <anchor xml:id="ois_5"/>
      <!--
End OptinSkin
-->
      <!--
/#sidebar
-->
      <!--
/#main-sidebar-container
-->
      <!--
/#content
-->
      <anchor xml:id="copyright"/>
      <para>© 2014 Baeldung. All Rights Reserved. </para>
      <anchor xml:id="credit"/>
      <!--
/#inner-wrapper
-->
      <!--
/#wrapper
-->
      <!--
/.fix
-->
      <!--
ngg_resource_manager_marker
-->
      <!--
WP SyntaxHighlighter Ver.1.7.3 Begin
-->
      <!--
WP SyntaxHighlighter Ver.1.7.3 End
-->
    </section>
  </section>
</article>
<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink">
  <info>
    <title>REST Pagination in Spring</title>
  </info>
  <anchor xml:id="wrapper"/>
  <anchor xml:id="inner-wrapper"/>
  <!--
/#side-nav
-->
  <!--
/.menus
-->
  <para><link linkend="top">Return to Content</link></para>
  <!--
#content Starts
-->
  <anchor xml:id="content"/>
  <anchor xml:id="main-sidebar-container"/>
  <!--
#main Starts
-->
  <anchor xml:id="toc_container"/>
  <para>Contents</para>
  <itemizedlist>
    <listitem>
      <para><link linkend="Table_of_Contents">Table of Contents</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.1_Overview">1. Overview</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.2_Page_as_Resource_vs_Page_as_Representation">2. Page as Resource vs Page as Representation</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.3_The_Controller">3. The Controller</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.4_Discoverability_for_REST_pagination">4. Discoverability for REST pagination</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.5_Test_Driving_Pagination">5. Test Driving Pagination</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.6_Test_Driving_Pagination_Discoverability">6. Test Driving Pagination Discoverability</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.7_Getting_All_Resources">7. Getting All Resources</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.8_REST_Paging_with_Range_HTTP_headers">8. REST Paging with Range HTTP headers</link></para>
    </listitem>
    <listitem>
      <para><link linkend="dbdoclet.9_Conclusion">9. Conclusion</link></para>
    </listitem>
  </itemizedlist>
  <para>If you&apos;re new here, <link xl:href="https://my.leadpages.net/leadbox/146382273f72a2%3A13a71ac76b46dc/5735865741475840/">you may want to get my &quot;REST APIs with Spring&quot; eBook</link>. Thanks for visiting!</para>
  <para><link xl:href=""/></para>
  <!--
Start Shortcoder content
-->
  <!--
End Shortcoder content
-->
  <section>
    <title><anchor xml:id="Table_of_Contents"/><emphasis role="bold">Table of Contents</emphasis></title>
    <itemizedlist>
      <listitem>
        <para><link linkend="overview"><emphasis role="bold">1. </emphasis>Overview</link></para>
      </listitem>
      <listitem>
        <para><link linkend="page"><emphasis role="bold">2. </emphasis>Page as Resource vs Page as Representation</link></para>
      </listitem>
      <listitem>
        <para><link linkend="controller"><emphasis role="bold">3. </emphasis>The Controller</link></para>
      </listitem>
      <listitem>
        <para><link linkend="discoverability"><emphasis role="bold">4. </emphasis>Discoverability for REST pagination</link></para>
      </listitem>
      <listitem>
        <para><link linkend="tdd"><emphasis role="bold">5. </emphasis>Test Driving Pagination</link></para>
      </listitem>
      <listitem>
        <para><link linkend="driving"><emphasis role="bold">6. </emphasis>Test Driving Pagination Discoverability</link></para>
      </listitem>
      <listitem>
        <para><link linkend="getall"><emphasis role="bold">7. </emphasis>Getting All Resources</link></para>
      </listitem>
      <listitem>
        <para><link linkend="httpheaders"><emphasis role="bold">8. </emphasis>REST Paging with <emphasis>Range</emphasis> HTTP headers</link></para>
      </listitem>
      <listitem>
        <para><link linkend="conclusion"><emphasis role="bold">9. </emphasis>Conclusion</link></para>
      </listitem>
    </itemizedlist>
    <section xml:id="overview.1">
      <title><anchor xml:id="dbdoclet.1_Overview"/><emphasis role="bold">1. Overview</emphasis></title>
      <para>This tutorial will focus on the <emphasis role="bold">implementation of pagination</emphasis> in a REST API, using Spring MVC and Spring Data.<anchor xml:id="more-1047"/></para>
    </section>
    <section xml:id="page.1">
      <title><anchor xml:id="dbdoclet.2_Page_as_Resource_vs_Page_as_Representation"/><emphasis role="bold">2. Page as Resource vs Page as Representation</emphasis></title>
      <para>The first question when designing pagination in the context of a RESTful architecture is whether to consider the <emphasis role="bold">page an actual Resource or just a Representation of Resources</emphasis>.</para>
      <para>Treating the page itself as a resource introduces a host of problems such as no longer being able to uniquely identify resources between calls. This, coupled with the fact that, in the persistence layer, the page is not proper entity but a holder that is constructed when necessary, makes the choice straightforward: <emphasis role="bold">the page is part of the representation</emphasis>.</para>
      <para>The next question in the pagination design in the context of REST is <emphasis role="bold">where to include the paging information</emphasis>:</para>
      <itemizedlist>
        <listitem>
          <para> in the <emphasis role="bold">URI path</emphasis>: <emphasis>/foo/page/1</emphasis></para>
        </listitem>
        <listitem>
          <para> the <emphasis role="bold">URI query</emphasis>: <emphasis>/foo?page=1</emphasis></para>
        </listitem>
      </itemizedlist>
      <para>Keeping in mind that <emphasis role="bold">a page is not a Resource</emphasis>, encoding the page information in the URI is no longer an option.</para>
      <para>We are going to use the standard way of solving this problem by <emphasis role="bold">encoding the paging information in a URI query.</emphasis></para>
    </section>
    <section xml:id="controller.1">
      <title><anchor xml:id="dbdoclet.3_The_Controller"/><emphasis role="bold">3. The Controller</emphasis></title>
      <para>Now, for the  implementation – the Spring <emphasis role="bold">MVC Controller for pagination</emphasis> is straightforward:</para>
      <screen>@RequestMapping( value = &quot;admin/foo&quot;,params = { &quot;page&quot;, &quot;size&quot; },method = GET )
@ResponseBody
public List&lt; Foo &gt; findPaginated(
 @RequestParam( &quot;page&quot; ) int page, @RequestParam( &quot;size&quot; ) int size,
 UriComponentsBuilder uriBuilder, HttpServletResponse response ){

   Page&lt; Foo &gt; resultPage = service.findPaginated( page, size );
   if( page &gt; resultPage.getTotalPages() ){
      throw new ResourceNotFoundException();
   }
   eventPublisher.publishEvent( new PaginatedResultsRetrievedEvent&lt; Foo &gt;
    ( Foo.class, uriBuilder, response, page, resultPage.getTotalPages(), size ) );

   return resultPage.getContent();
}</screen>
      <para>The two query parameters are injected into the Controller method via <emphasis>@RequestParam. </emphasis></para>
      <para>We’re also injecting both the Http Response and the <emphasis>UriComponentsBuilder</emphasis> to help with <emphasis role="bold">Discoverability</emphasis> – which we are decoupling via a custom event. If that is not a goal of the API, you can simply remove the custom event and be done.</para>
      <para>Finally – note that the focus of this article is only the REST and the web layer – to go deeper into the data access part of pagination you can <link xl:href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-seven-pagination/">check out this article</link> about Pagination with Spring Data.</para>
    </section>
    <section xml:id="discoverability.1">
      <title><anchor xml:id="dbdoclet.4_Discoverability_for_REST_pagination"/><emphasis role="bold">4. Discoverability for REST pagination</emphasis></title>
      <para>Withing the scope of <emphasis role="bold">pagination</emphasis>, satisfying the <emphasis role="bold">HATEOAS constraint of REST</emphasis> means enabling the client of the API to discover the <emphasis>next</emphasis> and <emphasis>previous</emphasis> pages based on the current page in the navigation. For this purpose, we’re going to use the <emphasis role="bold">Link HTTP header</emphasis>, coupled with the <link xl:href="http://www.iana.org/assignments/link-relations/link-relations.xml">official</link> “<emphasis><emphasis role="bold">next</emphasis></emphasis>“, “<emphasis><emphasis role="bold">prev</emphasis></emphasis>“, “<emphasis><emphasis role="bold">first</emphasis></emphasis>” and “<emphasis><emphasis role="bold">last</emphasis></emphasis>” link relation types.</para>
      <para>In REST, <emphasis role="bold">Discoverability is a cross cutting concern</emphasis>, applicable not only to specific operations but to types of operations. For example, each time a Resource is created, the URI of that Resource should be discoverable by the client. Since this requirement is relevant for the creation of ANY Resource, it should be dealt with separately and decoupled from the main Controller flow.</para>
      <para>With Spring, this <emphasis role="bold">decoupling is done with Events</emphasis>, as was thoroughly discussed in the <link xl:href="http://www.baeldung.com/2011/11/13/rest-service-discoverability-with-spring-part-5/">previous article focusing on Discoverability</link> of a REST Service. In the case of pagination, the event – <emphasis>PaginatedResultsRetrievedEvent</emphasis> – is fired in the controller layer, and discoverability is implemented with a custom listener for this event:</para>
      <screen>void addLinkHeaderOnPagedResourceRetrieval(
 UriComponentsBuilder uriBuilder, HttpServletResponse response,
 Class clazz, int page, int totalPages, int size ){

   String resourceName = clazz.getSimpleName().toString().toLowerCase();
   uriBuilder.path( &quot;/admin/&quot; + resourceName );

   StringBuilder linkHeader = new StringBuilder();
   if( hasNextPage( page, totalPages ) ){
      String uriNextPage = constructNextPageUri( uriBuilder, page, size );
      linkHeader.append( createLinkHeader( uriNextPage, &quot;next&quot; ) );
   }
   if( hasPreviousPage( page ) ){
      String uriPrevPage = constructPrevPageUri( uriBuilder, page, size );
      appendCommaIfNecessary( linkHeader );
      linkHeader.append( createLinkHeader( uriPrevPage, &quot;prev&quot; ) );
   }
   if( hasFirstPage( page ) ){
      String uriFirstPage = constructFirstPageUri( uriBuilder, size );
      appendCommaIfNecessary( linkHeader );
      linkHeader.append( createLinkHeader( uriFirstPage, &quot;first&quot; ) );
   }
   if( hasLastPage( page, totalPages ) ){
      String uriLastPage = constructLastPageUri( uriBuilder, totalPages, size );
      appendCommaIfNecessary( linkHeader );
      linkHeader.append( createLinkHeader( uriLastPage, &quot;last&quot; ) );
   }
   response.addHeader( &quot;Link&quot;, linkHeader.toString() );
}</screen>
      <para>In short, the listener checks if the navigation allows for a <emphasis>next</emphasis>, <emphasis>previous</emphasis>, <emphasis>first</emphasis> and <emphasis>last</emphasis> pages and – if it does – <emphasis role="bold">adds the relevant URIs to the Link HTTP Header</emphasis>.</para>
      <para>Note that, for brevity, I included only a partial code sample and <link xl:href="https://gist.github.com/1622997">the full code here</link>.</para>
    </section>
    <section xml:id="tdd.1">
      <title><anchor xml:id="dbdoclet.5_Test_Driving_Pagination"/><emphasis role="bold">5. Test Driving Pagination</emphasis></title>
      <para>Both the main logic of pagination and discoverability are covered by small, focused integration tests; as in the <link xl:href="http://www.baeldung.com/2011/11/06/restful-web-service-discoverability-part-4/">previous article</link>, the <link xl:href="http://code.google.com/p/rest-assured/">rest-assured library</link> is used to consume the REST service and to verify the results.</para>
      <para>These are a few example of pagination integration tests; for a full test suite, check out the github project (link at the end of the article):</para>
      <screen>@Test
public void whenResourcesAreRetrievedPaged_then200IsReceived(){
   Response response = givenAuth().get( paths.getFooURL() + &quot;?page=0&amp;size=2&quot; );

   assertThat( response.getStatusCode(), is( 200 ) );
}
@Test
public void whenPageOfResourcesAreRetrievedOutOfBounds_then404IsReceived(){
   String url = getFooURL() + &quot;?page=&quot; + randomNumeric(5) + &quot;&amp;size=2&quot;;
   Response response = givenAuth().get(url);

   assertThat( response.getStatusCode(), is( 404 ) );
}
@Test
public void givenResourcesExist_whenFirstPageIsRetrieved_thenPageContainsResources(){
   createResource();

   Response response = givenAuth().get( paths.getFooURL() + &quot;?page=0&amp;size=2&quot; );

   assertFalse( response.body().as( List.class ).isEmpty() );
}</screen>
    </section>
    <section xml:id="driving.1">
      <title><anchor xml:id="dbdoclet.6_Test_Driving_Pagination_Discoverability"/><emphasis role="bold">6. Test Driving Pagination Discoverability</emphasis></title>
      <para>Testing that <emphasis role="bold">pagination is discoverable</emphasis> by a client is relatively straightforward, although there is a lot of ground to cover. The tests are focused on the <emphasis role="bold">position of the current page in navigation</emphasis> and the different URIs that should be discoverable from each position:</para>
      <screen>@Test
public void whenFirstPageOfResourcesAreRetrieved_thenSecondPageIsNext(){
   Response response = givenAuth().get( getFooURL()+&quot;?page=0&amp;size=2&quot; );

   String uriToNextPage = extractURIByRel( response.getHeader( &quot;Link&quot; ), &quot;next&quot; );
   assertEquals( getFooURL()+&quot;?page=1&amp;size=2&quot;, uriToNextPage );
}
@Test
public void whenFirstPageOfResourcesAreRetrieved_thenNoPreviousPage(){
   Response response = givenAuth().get( getFooURL()+&quot;?page=0&amp;size=2&quot; );

   String uriToPrevPage = extractURIByRel( response.getHeader( &quot;Link&quot; ), &quot;prev&quot; );
   assertNull( uriToPrevPage );
}
@Test
public void whenSecondPageOfResourcesAreRetrieved_thenFirstPageIsPrevious(){
   Response response = givenAuth().get( getFooURL()+&quot;?page=1&amp;size=2&quot; );

   String uriToPrevPage = extractURIByRel( response.getHeader( &quot;Link&quot; ), &quot;prev&quot; );
   assertEquals( getFooURL()+&quot;?page=0&amp;size=2&quot;, uriToPrevPage );
}
@Test
public void whenLastPageOfResourcesIsRetrieved_thenNoNextPageIsDiscoverable(){
   Response first = givenAuth().get( getFooURL()+&quot;?page=0&amp;size=2&quot; );
   String uriToLastPage = extractURIByRel( first.getHeader( &quot;Link&quot; ), &quot;last&quot; );

   Response response = givenAuth().get( uriToLastPage );

   String uriToNextPage = extractURIByRel( response.getHeader( &quot;Link&quot; ), &quot;next&quot; );
   assertNull( uriToNextPage );
}</screen>
      <para>Note that the full low level code for <emphasis>extractURIByRel</emphasis> – responsible for extracting the URIs by <emphasis>rel</emphasis> relation <link xl:href="https://gist.github.com/eugenp/8269915">is here</link>.</para>
    </section>
    <section xml:id="getall.1">
      <title><anchor xml:id="dbdoclet.7_Getting_All_Resources"/><emphasis role="bold">7. Getting All Resources</emphasis></title>
      <para>On the same topic of pagination and discoverability, the choice must be made if a client is allowed to <emphasis role="bold">retrieve all the Resources in the system</emphasis> at once, or if the client <emphasis role="bold">MUST</emphasis> ask for them paginated. If the choice is made that the client cannot retrieve all Resources with a single request, and pagination is not optional but required, then several options are available for the <emphasis role="bold">response to a get all request</emphasis>. One option is to return a <emphasis role="bold">404 (Not Found)</emphasis> and use the <emphasis role="bold">Link header</emphasis> to make the first page discoverable:</para>
      <blockquote>
        <para> <emphasis>Link=&lt;http://localhost:8080/rest/api/admin/foo?page=0&amp;size=2&gt;; rel=”<emphasis role="bold">first</emphasis>“, &lt;http://localhost:8080/rest/api/admin/foo?page=103&amp;size=2&gt;; rel=”<emphasis role="bold">last</emphasis>“</emphasis></para>
      </blockquote>
      <para>Another option is to return redirect – <emphasis role="bold">303 (See Other</emphasis>) – to the first page. A more conservative route would be to simply return to the client a <emphasis role="bold">405 (Method Not Allowed)</emphasis> for the GET request.</para>
    </section>
    <section xml:id="httpheaders.1">
      <title><anchor xml:id="dbdoclet.8_REST_Paging_with_Range_HTTP_headers"/><emphasis role="bold">8. REST Paging with Range HTTP headers</emphasis></title>
      <para>A relatively different way of implementing pagination is to work with the <emphasis role="bold">HTTP Range headers</emphasis> – <emphasis>Range</emphasis>, <emphasis>Content-Range</emphasis>, <emphasis>If-Range</emphasis>, <emphasis>Accept-Ranges</emphasis> – and <emphasis role="bold">HTTP status codes</emphasis> – 206 (<emphasis>Partial Content</emphasis>), 413 (<emphasis>Request Entity Too Large</emphasis>), 416 (<emphasis>Requested Range Not Satisfiable</emphasis>). One view on this approach is that the HTTP Range extensions were not intended for pagination, and that they should be managed by the Server, not by the Application. Implementing pagination based on the HTTP Range header extensions is nevertheless technically possible, although not nearly as common as the implementation discussed in this article.</para>
    </section>
    <section xml:id="conclusion.1">
      <title><anchor xml:id="dbdoclet.9_Conclusion"/><emphasis role="bold">9. Conclusion</emphasis></title>
      <para>This tutorial illustrated how to implement Pagination in a REST API using Spring, and discussed how to set up and test Discoverability.</para>
      <para>If you want to go in depth on pagination in the persistence level, check out my <link xl:href="http://www.baeldung.com/jpa-pagination">JPA</link> or <link xl:href="http://www.baeldung.com/hibernate-pagination">Hibernate</link> pagination tutorials.</para>
      <para>The implementation of all these examples and code snippets <emphasis role="bold">can be found in my github project</emphasis> – this is an Eclipse based project, so it should be easy to import and run as it is.</para>
      <!--
Start Shortcoder content
-->
      <!--
End Shortcoder content
-->
      <para><link xl:href=""/></para>
      <anchor xml:id="dd_ajax_float"/>
      <para><link xl:href="http://twitter.com/share"/></para>
      <!--
OptinSkin
-->
      <anchor xml:id="ois_12"/>
      <!--
End OptinSkin
-->
      <!--
/.entry
-->
      <para><emphasis role="italic"/><link xl:href="http://www.baeldung.com/tag/hateoas/">HATEOAS</link>, <link xl:href="http://www.baeldung.com/tag/java-2/">java</link>, <link xl:href="http://www.baeldung.com/tag/rest/">REST</link>, <link xl:href="http://www.baeldung.com/tag/testing/">testing</link></para>
      <!--
/.post
-->
      <!--
/#main
-->
      <anchor xml:id="optinskin-widget-3"/>
      <!--
OptinSkin
-->
      <anchor xml:id="ois_5"/>
      <!--
End OptinSkin
-->
      <!--
/#sidebar
-->
      <!--
/#main-sidebar-container
-->
      <!--
/#content
-->
      <anchor xml:id="copyright"/>
      <para>© 2014 Baeldung. All Rights Reserved. </para>
      <anchor xml:id="credit"/>
      <!--
/#inner-wrapper
-->
      <!--
/#wrapper
-->
      <!--
/.fix
-->
      <!--
ngg_resource_manager_marker
-->
      <!--
WP SyntaxHighlighter Ver.1.7.3 Begin
-->
      <!--
WP SyntaxHighlighter Ver.1.7.3 End
-->
    </section>
  </section>
</article>
